name: Builds

on:
  push:
    branches:
        - master
    paths-ignore:
        - "**.md"
        - "**.ini"
  pull_request:
    branches:
      - master
      - task/update
    paths-ignore:
      - "**.md"
      - "**.ini"

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Netplay, Playback]
        include:
          - build_type: Netplay
            artifact_name: windows64-netplay
            build_config: -G "Ninja" -DCMAKE_BUILD_TYPE="Release" -DSLIPPI_PLAYBACK=false
          - build_type: Playback
            artifact_name: windows64-playback
            build_config: -G "Ninja" -DCMAKE_BUILD_TYPE="Release" -DSLIPPI_PLAYBACK=true
    name: "Windows ${{ matrix.build_type }}"
    runs-on: windows-2022
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        shell: bash
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - uses: egor-tensin/vs-shell@v2
      - name: "Build ${{ matrix.build_type }} Dolphin"
        shell: cmd
        working-directory: ${{ github.workspace }}
        run: |
          mkdir build
          cd build
          cmake ${{ matrix.build_config }} ..
          cmake --build . --target dolphin-emu
      - name: "Package ${{ matrix.build_type }}"
        working-directory: ${{ github.workspace }}
        run: |
          Xcopy /Y /E /I .\Data\Sys .\Binary\x64\Sys
          cd .\Binary\x64\
          fsutil file createnew FIX-VCRUNTIME140-ERROR.txt 0
          echo "Download and install this: https://aka.ms/vs/16/release/vc_redist.x64.exe" > .\FIX-VCRUNTIME140-ERROR.txt
      - name: "Add Playback codes"
        working-directory: ${{ github.workspace }}
        if: matrix.build_type == 'Playback'
        run: |
          Xcopy /Y /E /I .\Data\Sys .\Binary\x64\Sys
          Xcopy /Y /E /I .\Data\PlaybackGeckoCodes\* .\Binary\x64\Sys\GameSettings\
      - name: Package Artifact
        working-directory: ${{ github.workspace }}
        run: |
          $FILE_NAME="${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-${{ matrix.artifact_name }}.zip"
          mkdir artifact
          cd .\Binary\x64\
          fsutil file createnew portable.txt 0
          7z a $FILE_NAME .\*
          move $FILE_NAME ..\..\artifact\
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: "./artifact/"
  linux:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Netplay, Playback]
        include:
          - build_type: Netplay
            artifact_name: linux-netplay
            build_config: netplay
          - build_type: Playback
            artifact_name: linux-playback
            build_config: playback
    name: "Linux ${{ matrix.build_type }}"
    runs-on: ubuntu-22.04
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: "Install prerequisites"
        if: success()
        shell: bash
        run: |
          sudo dpkg --add-architecture amd64
          sudo apt update
          sudo apt install \
          cmake \
          pkg-config \
          git \
          wget \
          libao-dev \
          libasound2-dev \
          libavcodec-dev \
          libavformat-dev \
          libbluetooth-dev \
          libenet-dev \
          libgtk2.0-dev \
          liblzo2-dev \
          libminiupnpc-dev \
          libopenal-dev \
          libpulse-dev \
          libreadline-dev \
          libsfml-dev \
          libsoil-dev \
          libsoundtouch-dev \
          libswscale-dev \
          libusb-1.0-0-dev \
          libwebkit2gtk-4.0-dev \
          libxext-dev \
          libxrandr-dev \
          portaudio19-dev \
          zlib1g-dev \
          libudev-dev \
          libevdev-dev \
          libmbedtls-dev \
          libcurl4-openssl-dev \
          libegl1-mesa-dev \
          libpng-dev \
          qtbase5-private-dev \
          libxxf86vm-dev \
          x11proto-xinerama-dev \
          libfuse2
      - name: "Build ${{ matrix.build_type }} Dolphin"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          chmod +x ./build-linux.sh && ./build-linux.sh ${{ matrix.build_config }}
      - name: "Build ${{ matrix.build_type }} AppImage"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          chmod +x ./build-appimage.sh && ./build-appimage.sh ${{ matrix.build_config }}
      - name: "Package"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          mkdir artifact
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-${{ matrix.artifact_name }}.zip
          chmod +x ./*.AppImage
          zip -r "${FILE_NAME}" ./*.AppImage*
          zip -r -j "${FILE_NAME}" ./*.AppImage*
          pushd ./AppDir/usr/bin/
          zip -r -u "../../../${FILE_NAME}" ./Sys
          popd
          mv "${FILE_NAME}" ./artifact/
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: "./artifact/"
  macOS:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Netplay, Playback]
        include:
          - build_type: Netplay
            artifact_name: macOS-netplay
            build_config: netplay
          - build_type: Playback
            artifact_name: macOS-playback
            build_config: playback
    name: "macOS ${{ matrix.build_type }}"
    runs-on: macos-11
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: "Download and Install prerequisites"
        if: success()
        shell: bash
        run: |
          rm '/usr/local/bin/2to3' || true
          echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
          brew upgrade cmake
          brew install \
          ffmpeg@2.8 \
          libpng \
          pkgconfig \
          libao \
          sound-touch \
          hidapi \
          qt@6
      - name: "Build ${{ matrix.build_type }} Dolphin"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        env:
          CERTIFICATE_MACOS_APPLICATION: ${{ secrets.CERTIFICATE_MACOS_APPLICATION }}
        run: |
          export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib
          chmod +x ./build-mac.sh && ./build-mac.sh ${{ matrix.build_config }}
          mkdir artifact
          FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-${{ matrix.artifact_name }}
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
      - name: "Package, Sign and Notarize Netplay Release DMG"
        if: success() && env.CERTIFICATE_MACOS_APPLICATION != null
        shell: bash
        working-directory: ${{ github.workspace }}
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          CERTIFICATE_MACOS_APPLICATION: ${{ secrets.CERTIFICATE_MACOS_APPLICATION }}
        run: |
          rm build/Binaries/traversal_server
          chmod +x Tools/create-dmg/run.sh 
          ./Tools/create-dmg/run.sh --no-internet-enable \
            --volname "Slippi Dolphin Beta Installer" \
            --volicon "Data/slippi_dmg_icon.icns" \
            --background "Data/slippi_dmg_background.png" \
            --text-size 14 \
            --window-pos 200 120 \
            --window-size 590 610 \
            --icon-size 100 \
            --app-drop-link 440 196 \
            --icon "Slippi_Dolphin.app" 140 196 \
            --hide-extension "Slippi_Dolphin.app" \
            "${{ env.FILE_NAME }}.dmg" \
            "./build/Binaries/"
          mv "${{ env.FILE_NAME }}.dmg" artifact/
          /usr/bin/codesign -f -s "${{ secrets.APPLE_IDENTITY_HASH }}" --deep --options runtime ./artifact/${{ env.FILE_NAME }}.dmg
          chmod +x Tools/notarize_netplay.sh && ./Tools/notarize_netplay.sh ./artifact/${{ env.FILE_NAME }}.dmg
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: "./artifact/"
      #- name: "Enable Admin Debugging via SSH (if failed)"
      # if: failure()
      # uses: luchihoratiu/debug-via-ssh@main
      # with:
      #  NGROK_AUTH_TOKEN: ${{ secrets.NGROK_TOKEN }}
      #   SSH_PASS: ${{ secrets.NGROK_PASS }}
